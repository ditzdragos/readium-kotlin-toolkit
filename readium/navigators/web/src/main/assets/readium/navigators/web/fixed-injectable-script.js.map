{"version":3,"file":"fixed-injectable-script.js","mappings":"yBAAO,MAAMA,EACT,WAAAC,CAAYC,EAAQC,GAChBC,KAAKF,OAASA,EACdE,KAAKD,SAAWA,EAChBE,SAASC,iBAAiB,SAAUC,IAChCH,KAAKI,QAAQD,EAAM,IACpB,EACP,CACA,OAAAC,CAAQD,GACJ,GAAIA,EAAME,iBACN,OAEJ,MAAMC,EAAYN,KAAKF,OAAOS,eAC9B,GAAID,GAA+B,SAAlBA,EAAUE,KAIvB,OAEJ,IAAIC,EAEAA,EADAN,EAAMO,kBAAkBC,YACPX,KAAKY,0BAA0BT,EAAMO,QAGrC,KAEjBD,EACIA,aAA0BI,mBAC1Bb,KAAKD,SAASe,gBAAgBL,EAAeM,MAIjDf,KAAKD,SAASiB,MAAMb,GAExBA,EAAMc,kBACNd,EAAMe,gBACV,CAEA,yBAAAN,CAA0BO,GACtB,OAAe,MAAXA,EACO,MAgBqD,GAdxC,CACpB,IACA,QACA,SACA,SACA,UACA,QACA,QACA,SACA,SACA,SACA,WACA,SAEgBC,QAAQD,EAAQE,SAASC,gBAIzCH,EAAQI,aAAa,oBACoC,SAAzDJ,EAAQK,aAAa,mBAAmBF,cAJjCH,EAQPA,EAAQM,cACDzB,KAAKY,0BAA0BO,EAAQM,eAE3C,IACX,EC5DJ3B,OAAOI,iBAAiB,WAAYC,IAChC,GAAIA,EAAMuB,MAAM,GAAI,CAChB,MAAMC,EAAcxB,EAAMuB,MAAM,GAC1BE,EAAoB,IAAIC,EAA0BF,GACxD,IAAI/B,EAAiBE,OAAQ8B,EACjC,KAEJ,MAAMC,EACF,WAAAhC,CAAY8B,GACR3B,KAAK2B,YAAcA,CACvB,CACA,KAAAX,CAAMb,GACF,MAAM2B,EAAW,CAAEC,EAAG5B,EAAM6B,QAASC,EAAG9B,EAAM+B,SAC9ClC,KAAK2B,YAAYQ,YAAYL,EACjC,CACA,eAAAhB,CAAgBC,GACZf,KAAK2B,YAAYQ,YAAY,CAAEpB,KAAMA,GACzC,E","sources":["webpack://readium-js/./src/common/gestures.ts","webpack://readium-js/./src/index-fixed-injectable.ts"],"sourcesContent":["export class GesturesDetector {\n    constructor(window, listener) {\n        this.window = window;\n        this.listener = listener;\n        document.addEventListener(\"click\", (event) => {\n            this.onClick(event);\n        }, false);\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.type == \"Range\") {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            // selection.type might be None (collapsed) or Caret with a collapsed range\n            // when there is not true selection.\n            return;\n        }\n        let nearestElement;\n        if (event.target instanceof HTMLElement) {\n            nearestElement = this.nearestInteractiveElement(event.target);\n        }\n        else {\n            nearestElement = null;\n        }\n        if (nearestElement) {\n            if (nearestElement instanceof HTMLAnchorElement) {\n                this.listener.onLinkActivated(nearestElement.href);\n            }\n        }\n        else {\n            this.listener.onTap(event);\n        }\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n","//\n//  Copyright 2024 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n/**\n * Script loaded by fixed layout resources.\n */\nimport { GesturesDetector } from \"./common/gestures\";\nwindow.addEventListener(\"message\", (event) => {\n    if (event.ports[0]) {\n        const messagePort = event.ports[0];\n        const messagingListener = new MessagingGesturesListener(messagePort);\n        new GesturesDetector(window, messagingListener);\n    }\n});\nclass MessagingGesturesListener {\n    constructor(messagePort) {\n        this.messagePort = messagePort;\n    }\n    onTap(event) {\n        const tapEvent = { x: event.clientX, y: event.clientY };\n        this.messagePort.postMessage(tapEvent);\n    }\n    onLinkActivated(href) {\n        this.messagePort.postMessage({ href: href });\n    }\n}\n"],"names":["GesturesDetector","constructor","window","listener","this","document","addEventListener","event","onClick","defaultPrevented","selection","getSelection","type","nearestElement","target","HTMLElement","nearestInteractiveElement","HTMLAnchorElement","onLinkActivated","href","onTap","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","parentElement","ports","messagePort","messagingListener","MessagingGesturesListener","tapEvent","x","clientX","y","clientY","postMessage"],"sourceRoot":""}