{"version":3,"file":"fixed-single-script.js","mappings":"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","sources":["webpack://readium-js/./src/fixed/page-manager.ts","webpack://readium-js/./src/util/viewport.ts","webpack://readium-js/./src/common/gestures.ts","webpack://readium-js/./src/fixed/single-area-manager.ts","webpack://readium-js/./src/util/fit.ts","webpack://readium-js/./src/bridge/fixed-gestures-bridge.ts","webpack://readium-js/./src/index-fixed-single.ts","webpack://readium-js/./src/bridge/fixed-single-bridge.ts"],"sourcesContent":["/** Manages a fixed layout resource embedded in an iframe. */\nexport class PageManager {\n    constructor(window, iframe, listener) {\n        this.margins = { top: 0, right: 0, bottom: 0, left: 0 };\n        this.channel = new MessageChannel();\n        if (!iframe.contentWindow) {\n            throw Error(\"Iframe argument must have been attached to DOM.\");\n        }\n        this.listener = listener;\n        this.iframe = iframe;\n        this.iframe.addEventListener(\"load\", () => {\n            this.onIframeLoaded();\n        }, { once: true });\n    }\n    show() {\n        this.iframe.style.display = \"unset\";\n    }\n    hide() {\n        this.iframe.style.display = \"none\";\n    }\n    /** Sets page margins. */\n    setMargins(margins) {\n        if (this.margins == margins) {\n            return;\n        }\n        this.iframe.style.marginTop = this.margins.top + \"px\";\n        this.iframe.style.marginLeft = this.margins.left + \"px\";\n        this.iframe.style.marginBottom = this.margins.bottom + \"px\";\n        this.iframe.style.marginRight = this.margins.right + \"px\";\n    }\n    /** Loads page content. */\n    loadPage(url) {\n        this.iframe.src = url;\n    }\n    /** Sets the size of this page without content. */\n    setPlaceholder(size) {\n        this.iframe.style.visibility = \"hidden\";\n        this.iframe.style.width = size.width + \"px\";\n        this.iframe.style.height = size.height + \"px\";\n        this.size = size;\n    }\n    onIframeLoaded() {\n        const viewport = this.iframe.contentWindow.document.querySelector(\"meta[name=viewport]\");\n        if (!viewport || viewport instanceof HTMLMetaElement) {\n            //FIXME: handle edge case\n            return;\n        }\n        const pageSize = this.parsePageSize(viewport);\n        if (!pageSize) {\n            //FIXME: handle edge case\n            return;\n        }\n        this.iframe.style.width = pageSize.width + \"px\";\n        this.iframe.style.height = pageSize.height + \"px\";\n        this.size = pageSize;\n        this.channel.port1.onmessage = (message) => {\n            this.onMessageFromIframe(message);\n        };\n        this.iframe.contentWindow.postMessage(\"Init\", \"*\", [this.channel.port2]);\n        this.listener.onIframeLoaded();\n    }\n    onMessageFromIframe(message) {\n        if (message.data.x && message.data.y) {\n            this.listener.onTap({ x: message.data.x, y: message.data.y });\n        }\n        else if (message.data.href) {\n            this.listener.onLinkActivated(message.data.href);\n        }\n    }\n    /** Parses the page size from the viewport meta tag of the loaded resource. */\n    parsePageSize(viewportMeta) {\n        const regex = /(\\w+) *= *([^\\s,]+)/g;\n        const properties = new Map();\n        let match;\n        while ((match = regex.exec(viewportMeta.content))) {\n            if (match != null) {\n                properties.set(match[1], match[2]);\n            }\n        }\n        const width = parseFloat(properties.get(\"width\"));\n        const height = parseFloat(properties.get(\"height\"));\n        if (width && height) {\n            return { width, height };\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n","export class ViewportStringBuilder {\n    setInitialScale(scale) {\n        this.initialScale = scale;\n        return this;\n    }\n    setMinimumScale(scale) {\n        this.minimumScale = scale;\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    build() {\n        const components = [];\n        if (this.initialScale) {\n            components.push(\"initial-scale=\" + this.initialScale);\n        }\n        if (this.minimumScale) {\n            components.push(\"minimum-scale=\" + this.minimumScale);\n        }\n        if (this.width) {\n            components.push(\"width=\" + this.width);\n        }\n        if (this.height) {\n            components.push(\"height=\" + this.height);\n        }\n        return components.join(\", \");\n    }\n}\n","export class GesturesDetector {\n    constructor(window, listener) {\n        this.window = window;\n        this.listener = listener;\n        document.addEventListener(\"click\", (event) => {\n            this.onClick(event);\n        }, false);\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.type == \"Range\") {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            // selection.type might be None (collapsed) or Caret with a collapsed range\n            // when there is not true selection.\n            return;\n        }\n        let nearestElement;\n        if (event.target instanceof HTMLElement) {\n            nearestElement = this.nearestInteractiveElement(event.target);\n        }\n        else {\n            nearestElement = null;\n        }\n        if (nearestElement) {\n            if (nearestElement instanceof HTMLAnchorElement) {\n                this.listener.onLinkActivated(nearestElement.href);\n            }\n        }\n        else {\n            this.listener.onTap(event);\n        }\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n","import { computeScale } from \"../util/fit\";\nimport { PageManager } from \"./page-manager\";\nimport { ViewportStringBuilder } from \"../util/viewport\";\nimport { GesturesDetector } from \"../common/gestures\";\nexport class SingleAreaManager {\n    constructor(window, iframe, metaViewport, listener) {\n        this.fit = \"contain\" /* Fit.Contain */;\n        this.insets = { top: 0, right: 0, bottom: 0, left: 0 };\n        this.scale = 1;\n        const wrapperGesturesListener = {\n            onTap: (event) => {\n                const tapEvent = {\n                    x: (event.clientX - visualViewport.offsetLeft) *\n                        visualViewport.scale,\n                    y: (event.clientY - visualViewport.offsetTop) * visualViewport.scale,\n                };\n                listener.onTap(tapEvent);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onLinkActivated: (_) => {\n                throw Error(\"No interactive element in the root document.\");\n            },\n        };\n        new GesturesDetector(window, wrapperGesturesListener);\n        this.metaViewport = metaViewport;\n        const pageListener = {\n            onIframeLoaded: () => {\n                this.onIframeLoaded();\n            },\n            onTap: (event) => {\n                const boundingRect = iframe.getBoundingClientRect();\n                const tapEvent = {\n                    x: (event.x + boundingRect.left - visualViewport.offsetLeft) *\n                        visualViewport.scale,\n                    y: (event.y + boundingRect.top - visualViewport.offsetTop) *\n                        visualViewport.scale,\n                };\n                listener.onTap(tapEvent);\n            },\n            onLinkActivated: (href) => {\n                listener.onLinkActivated(href);\n            },\n        };\n        this.page = new PageManager(window, iframe, pageListener);\n    }\n    setViewport(viewport, insets) {\n        if (this.viewport == viewport && this.insets == insets) {\n            return;\n        }\n        this.viewport = viewport;\n        this.insets = insets;\n        this.layout();\n    }\n    setFit(fit) {\n        if (this.fit == fit) {\n            return;\n        }\n        this.fit = fit;\n        this.layout();\n    }\n    loadResource(url) {\n        this.page.hide();\n        this.page.loadPage(url);\n    }\n    onIframeLoaded() {\n        if (!this.page.size) {\n            // FIXME: raise error\n        }\n        else {\n            this.layout();\n        }\n    }\n    layout() {\n        if (!this.page.size || !this.viewport) {\n            return;\n        }\n        const margins = {\n            top: this.insets.top,\n            right: this.insets.right,\n            bottom: this.insets.bottom,\n            left: this.insets.left,\n        };\n        this.page.setMargins(margins);\n        const safeDrawingSize = {\n            width: this.viewport.width - this.insets.left - this.insets.right,\n            height: this.viewport.height - this.insets.top - this.insets.bottom,\n        };\n        const scale = computeScale(this.fit, this.page.size, safeDrawingSize);\n        this.metaViewport.content = new ViewportStringBuilder()\n            .setInitialScale(scale)\n            .setMinimumScale(scale)\n            .setWidth(this.page.size.width)\n            .setHeight(this.page.size.height)\n            .build();\n        this.scale = scale;\n        this.page.show();\n    }\n}\n","export function computeScale(fit, content, container) {\n    switch (fit) {\n        case \"contain\" /* Fit.Contain */:\n            return fitContain(content, container);\n        case \"width\" /* Fit.Width */:\n            return fitWidth(content, container);\n        case \"height\" /* Fit.Height */:\n            return fitHeight(content, container);\n    }\n}\nfunction fitContain(content, container) {\n    const widthRatio = container.width / content.width;\n    const heightRatio = container.height / content.height;\n    return Math.min(widthRatio, heightRatio);\n}\nfunction fitWidth(content, container) {\n    return container.width / content.width;\n}\nfunction fitHeight(content, container) {\n    return container.height / content.height;\n}\n","export class BridgeGesturesAdapter {\n    constructor(gesturesApi) {\n        this.nativeApi = gesturesApi;\n    }\n    onTap(event) {\n        this.nativeApi.onTap(JSON.stringify(event));\n    }\n    onLinkActivated(href) {\n        this.nativeApi.onLinkActivated(href);\n    }\n}\n","//\n//  Copyright 2024 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\nimport { FixedSingleBridge } from \"./bridge/fixed-single-bridge\";\nconst iframe = document.getElementById(\"page\");\nconst metaViewport = document.querySelector(\"meta[name=viewport]\");\nwindow.singleArea = new FixedSingleBridge(window, iframe, metaViewport, window.gestures);\n","import { SingleAreaManager } from \"../fixed/single-area-manager\";\nimport { BridgeGesturesAdapter } from \"./fixed-gestures-bridge\";\nexport class FixedSingleBridge {\n    constructor(window, iframe, metaViewport, gestures) {\n        const listener = new BridgeGesturesAdapter(gestures);\n        this.manager = new SingleAreaManager(window, iframe, metaViewport, listener);\n    }\n    loadResource(url) {\n        this.manager.loadResource(url);\n    }\n    setViewport(viewporttWidth, viewportHeight, insetTop, insetRight, insetBottom, insetLeft) {\n        const viewport = { width: viewporttWidth, height: viewportHeight };\n        const insets = {\n            top: insetTop,\n            left: insetLeft,\n            bottom: insetBottom,\n            right: insetRight,\n        };\n        this.manager.setViewport(viewport, insets);\n    }\n    setFit(fit) {\n        if (fit != \"contain\" && fit != \"width\" && fit != \"height\") {\n            throw Error(`Invalid fit value: ${fit}`);\n        }\n        this.manager.setFit(fit);\n    }\n}\n"],"names":["PageManager","constructor","window","iframe","listener","this","margins","top","right","bottom","left","channel","MessageChannel","contentWindow","Error","addEventListener","onIframeLoaded","once","show","style","display","hide","setMargins","marginTop","marginLeft","marginBottom","marginRight","loadPage","url","src","setPlaceholder","size","visibility","width","height","viewport","document","querySelector","HTMLMetaElement","pageSize","parsePageSize","port1","onmessage","message","onMessageFromIframe","postMessage","port2","data","x","y","onTap","href","onLinkActivated","viewportMeta","regex","properties","Map","match","exec","content","set","parseFloat","get","ViewportStringBuilder","setInitialScale","scale","initialScale","setMinimumScale","minimumScale","setWidth","setHeight","build","components","push","join","GesturesDetector","event","onClick","defaultPrevented","selection","getSelection","type","nearestElement","target","HTMLElement","nearestInteractiveElement","HTMLAnchorElement","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","parentElement","SingleAreaManager","metaViewport","fit","insets","tapEvent","clientX","visualViewport","offsetLeft","clientY","offsetTop","_","pageListener","boundingRect","getBoundingClientRect","page","setViewport","layout","setFit","loadResource","safeDrawingSize","container","widthRatio","heightRatio","Math","min","fitContain","fitWidth","fitHeight","computeScale","BridgeGesturesAdapter","gesturesApi","nativeApi","JSON","stringify","getElementById","singleArea","gestures","manager","viewporttWidth","viewportHeight","insetTop","insetRight","insetBottom","insetLeft"],"sourceRoot":""}