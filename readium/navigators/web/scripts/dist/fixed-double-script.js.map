{"version":3,"file":"fixed-double-script.js","mappings":"yBACO,MAAMA,EACT,WAAAC,CAAYC,EAAQC,EAAQC,GAGxB,GAFAC,KAAKC,QAAU,CAAEC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,GACpDL,KAAKM,QAAU,IAAIC,gBACdT,EAAOU,cACR,MAAMC,MAAM,mDAEhBT,KAAKD,SAAWA,EAChBC,KAAKF,OAASA,EACdE,KAAKF,OAAOY,iBAAiB,QAAQ,KACjCV,KAAKW,gBAAgB,GAE7B,CACA,IAAAC,GACIZ,KAAKF,OAAOe,MAAMC,QAAU,OAChC,CACA,IAAAC,GACIf,KAAKF,OAAOe,MAAMC,QAAU,MAChC,CAEA,UAAAE,CAAWf,GACHD,KAAKC,SAAWA,IAGpBD,KAAKF,OAAOe,MAAMI,UAAYjB,KAAKC,QAAQC,IAAM,KACjDF,KAAKF,OAAOe,MAAMK,WAAalB,KAAKC,QAAQI,KAAO,KACnDL,KAAKF,OAAOe,MAAMM,aAAenB,KAAKC,QAAQG,OAAS,KACvDJ,KAAKF,OAAOe,MAAMO,YAAcpB,KAAKC,QAAQE,MAAQ,KACzD,CAEA,QAAAkB,CAASC,GACLtB,KAAKF,OAAOyB,IAAMD,CACtB,CAEA,cAAAE,CAAeC,GACXzB,KAAKF,OAAOe,MAAMa,MAAQD,EAAKC,MAAQ,KACvC1B,KAAKF,OAAOe,MAAMc,OAASF,EAAKE,OAAS,KACzC3B,KAAKyB,KAAOA,CAChB,CACA,cAAAd,GACI,MAAMiB,EAAW5B,KAAKF,OAAOU,cAAcqB,SAASC,cAAc,uBAClE,IAAKF,GAAYA,aAAoBG,gBAEjC,OAEJ,MAAMC,EAAWhC,KAAKiC,cAAcL,GAC/BI,IAILhC,KAAKF,OAAOe,MAAMa,MAAQM,EAASN,MAAQ,KAC3C1B,KAAKF,OAAOe,MAAMc,OAASK,EAASL,OAAS,KAC7C3B,KAAKyB,KAAOO,EACZhC,KAAKM,QAAQ4B,MAAMC,UAAaC,IAC5BC,QAAQC,IAAI,aAAaF,KACzBpC,KAAKuC,oBAAoBH,EAAQ,EAErCpC,KAAKF,OAAOU,cAAcgC,YAAY,OAAQ,IAAK,CAACxC,KAAKM,QAAQmC,QACjEzC,KAAKD,SAASY,iBAClB,CACA,mBAAA4B,CAAoBH,GACZA,EAAQM,KAAKC,GAAKP,EAAQM,KAAKE,GAC/B5C,KAAKD,SAAS8C,MAAM,CAAEF,EAAGP,EAAQM,KAAKC,EAAGC,EAAGR,EAAQM,KAAKE,GAEjE,CAEA,aAAAX,CAAca,GACV,MAAMC,EAAQ,uBACRC,EAAa,IAAIC,IACvB,IAAIC,EACJ,KAAQA,EAAQH,EAAMI,KAAKL,EAAaM,UACvB,MAATF,GACAF,EAAWK,IAAIH,EAAM,GAAIA,EAAM,IAGvC,MAAMxB,EAAQ4B,WAAWN,EAAWO,IAAI,UAClC5B,EAAS2B,WAAWN,EAAWO,IAAI,WACzC,OAAI7B,GAASC,EACF,CAAED,QAAOC,eAGhB,CAER,ECpFG,MAAM6B,EACT,eAAAC,CAAgBC,GAEZ,OADA1D,KAAK2D,aAAeD,EACb1D,IACX,CACA,eAAA4D,CAAgBF,GAEZ,OADA1D,KAAK6D,aAAeH,EACb1D,IACX,CACA,QAAA8D,CAASpC,GAEL,OADA1B,KAAK0B,MAAQA,EACN1B,IACX,CACA,SAAA+D,CAAUpC,GAEN,OADA3B,KAAK2B,OAASA,EACP3B,IACX,CACA,KAAAgE,GACI,MAAMC,EAAa,GAanB,OAZIjE,KAAK2D,cACLM,EAAWC,KAAK,iBAAmBlE,KAAK2D,cAExC3D,KAAK6D,cACLI,EAAWC,KAAK,iBAAmBlE,KAAK6D,cAExC7D,KAAK0B,OACLuC,EAAWC,KAAK,SAAWlE,KAAK0B,OAEhC1B,KAAK2B,QACLsC,EAAWC,KAAK,UAAYlE,KAAK2B,QAE9BsC,EAAWE,KAAK,KAC3B,EChCG,MAAMC,EACT,WAAAxE,CAAYC,EAAQE,GAChBsC,QAAQC,IAAI,4CAA4CzC,KACxDG,KAAKH,OAASA,EACdG,KAAKD,SAAWA,EAChB8B,SAASnB,iBAAiB,SAAU2D,IAChChC,QAAQC,IAAI,WACZtC,KAAKsE,QAAQD,EAAM,IACpB,EAIP,CACA,OAAAC,CAAQD,GACJ,GAAIA,EAAME,iBACN,OAEJ,MAAMC,EAAYxE,KAAKH,OAAO4E,eAC1BD,GAA+B,SAAlBA,EAAUE,MAMvBL,EAAMM,kBAAkBC,SACxB5E,KAAK6E,0BAA0BR,EAAMM,UAGzCtC,QAAQC,IAAI,gBACZtC,KAAKD,SAAS8C,MAAMwB,GACpBA,EAAMS,kBACNT,EAAMU,iBACV,CAEA,yBAAAF,CAA0BG,GACtB,OAAe,MAAXA,EACO,MAgBqD,GAdxC,CACpB,IACA,QACA,SACA,SACA,UACA,QACA,QACA,SACA,SACA,SACA,WACA,SAEgBC,QAAQD,EAAQE,SAASC,gBAIzCH,EAAQI,aAAa,oBACoC,SAAzDJ,EAAQK,aAAa,mBAAmBF,cAJjCH,EAAQM,UAQfN,EAAQO,cACDvF,KAAK6E,0BAA0BG,EAAQO,eAE3C,IACX,EC7DG,MAAMC,EACT,WAAA5F,CAAYC,EAAQ4F,EAAYC,EAAaC,EAAc5F,GACvDC,KAAK4F,IAAM,UACX5F,KAAK6F,OAAS,CAAE3F,IAAK,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,GAMnD,IAAI+D,EAAiBvE,EALW,CAC5BgD,MAAQwB,IACJtE,EAAS8C,MAAM,CAAEF,EAAG0B,EAAMyB,QAASlD,EAAGyB,EAAM0B,SAAU,IAI9D,MAAMC,EAAe,CACjBrF,eAAgB,KACZX,KAAKiG,QAAQ,EAEjBpD,MAAQwB,IACJtE,EAAS8C,MAAMwB,EAAM,GAG7BrE,KAAKkG,SAAW,IAAIvG,EAAYE,EAAQ4F,EAAYO,GACpDhG,KAAKmG,UAAY,IAAIxG,EAAYE,EAAQ6F,EAAaM,GACtDhG,KAAK2F,aAAeA,CACxB,CACA,UAAAS,CAAWC,GACPrG,KAAKkG,SAASnF,OACdf,KAAKmG,UAAUpF,OACff,KAAKqG,OAASA,EACVA,EAAOhG,MACPL,KAAKkG,SAAS7E,SAASgF,EAAOhG,MAE9BgG,EAAOlG,OACPH,KAAKmG,UAAU9E,SAASgF,EAAOlG,MAEvC,CACA,WAAAmG,CAAY7E,EAAMoE,GACV7F,KAAK4B,UAAYH,GAAQzB,KAAK6F,QAAUA,IAG5C7F,KAAK4B,SAAWH,EAChBzB,KAAK6F,OAASA,EACd7F,KAAKiG,SACT,CACA,MAAAM,CAAOX,GACC5F,KAAK4F,KAAOA,IAGhB5F,KAAK4F,IAAMA,EACX5F,KAAKiG,SACT,CACA,MAAAA,GACI,IAAKjG,KAAK4B,WACJ5B,KAAKkG,SAASzE,MAAQzB,KAAKqG,OAAOhG,OAClCL,KAAKmG,UAAU1E,MAAQzB,KAAKqG,OAAOlG,MACrC,OAEJ,MAAMqG,EAAc,CAChBtG,IAAKF,KAAK6F,OAAO3F,IACjBC,MAAO,EACPC,OAAQJ,KAAK6F,OAAOzF,OACpBC,KAAML,KAAK6F,OAAOxF,MAEtBL,KAAKkG,SAASlF,WAAWwF,GACzB,MAAMC,EAAe,CACjBvG,IAAKF,KAAK6F,OAAO3F,IACjBC,MAAOH,KAAK6F,OAAO1F,MACnBC,OAAQJ,KAAK6F,OAAOzF,OACpBC,KAAM,GAEVL,KAAKmG,UAAUnF,WAAWyF,GACrBzG,KAAKqG,OAAOlG,MAGPH,KAAKqG,OAAOhG,MAClBL,KAAKkG,SAAS1E,eAAexB,KAAKmG,UAAU1E,MAH5CzB,KAAKmG,UAAU3E,eAAexB,KAAKkG,SAASzE,MAKhD,MAAMiF,EAAe1G,KAAKkG,SAASzE,KAAKC,MAAQ1B,KAAKmG,UAAU1E,KAAKC,MAC9DiF,EAAgBC,KAAKC,IAAI7G,KAAKkG,SAASzE,KAAKE,OAAQ3B,KAAKmG,UAAU1E,KAAKE,QACxEmF,EAAc,CAAEpF,MAAOgF,EAAc/E,OAAQgF,GAC7CI,EAAkB,CACpBrF,MAAO1B,KAAK4B,SAASF,MAAQ1B,KAAK6F,OAAOxF,KAAOL,KAAK6F,OAAO1F,MAC5DwB,OAAQ3B,KAAK4B,SAASD,OAAS3B,KAAK6F,OAAO3F,IAAMF,KAAK6F,OAAOzF,QAE3DsD,ECrFP,SAAsBkC,EAAKxC,EAAS4D,GACvC,OAAQpB,GACJ,IAAK,UACD,OAOZ,SAAoBxC,EAAS4D,GACzB,MAAMC,EAAaD,EAAUtF,MAAQ0B,EAAQ1B,MACvCwF,EAAcF,EAAUrF,OAASyB,EAAQzB,OAC/C,OAAOiF,KAAKO,IAAIF,EAAYC,EAChC,CAXmBE,CAAWhE,EAAS4D,GAC/B,IAAK,QACD,OAUZ,SAAkB5D,EAAS4D,GACvB,OAAOA,EAAUtF,MAAQ0B,EAAQ1B,KACrC,CAZmB2F,CAASjE,EAAS4D,GAC7B,IAAK,SACD,OAWZ,SAAmB5D,EAAS4D,GACxB,OAAOA,EAAUrF,OAASyB,EAAQzB,MACtC,CAbmB2F,CAAUlE,EAAS4D,GAEtC,CD4EsBO,CAAavH,KAAK4F,IAAKkB,EAAaC,GAClD/G,KAAK2F,aAAavC,SAAU,IAAII,GAC3BC,gBAAgBC,GAChBE,gBAAgBF,GAChBI,SAAS4C,GACT3C,UAAU4C,GACV3C,QACLhE,KAAKkG,SAAStF,OACdZ,KAAKmG,UAAUvF,MACnB,EE9FG,MAAM4G,EACT,WAAA5H,CAAY6H,GACRzH,KAAK0H,UAAYD,CACrB,CACA,KAAA5E,CAAMwB,GACFrE,KAAK0H,UAAU7E,MAAM8E,KAAKC,UAAUvD,GACxC,ECAJ,MAAMoB,EAAa5D,SAASgG,eAAe,aACrCnC,EAAc7D,SAASgG,eAAe,cACtClC,EAAe9D,SAASC,cAAc,uBAC5CgG,OAAOC,UAAUC,WAAa,ICPvB,MACH,WAAApI,CAAYC,EAAQ4F,EAAYC,EAAaC,EAAcsC,GACvD,MAAMlI,EAAW,IAAIyH,EAAsBS,GAC3CjI,KAAKkI,QAAU,IAAI1C,EAAkB3F,EAAQ4F,EAAYC,EAAaC,EAAc5F,EACxF,CACA,UAAAqG,CAAWC,GACPrG,KAAKkI,QAAQ9B,WAAWC,EAC5B,CACA,WAAAC,CAAY6B,EAAgBC,EAAgBC,EAAUC,EAAYC,EAAaC,GAC3E,MAAM5G,EAAW,CAAEF,MAAOyG,EAAgBxG,OAAQyG,GAC5CvC,EAAS,CACX3F,IAAKmI,EACLhI,KAAMmI,EACNpI,OAAQmI,EACRpI,MAAOmI,GAEXtI,KAAKkI,QAAQ5B,YAAY1E,EAAUiE,EACvC,CACA,MAAAU,CAAOX,GACH,GAAW,WAAPA,GAA2B,SAAPA,GAAyB,UAAPA,EACtC,MAAMnF,MAAM,sBAAsBmF,KAEtC5F,KAAKkI,QAAQ3B,OAAOX,EACxB,GDhBgD/F,OAAQ4F,EAAYC,EAAaC,EAAc9F,OAAOoI,S","sources":["webpack://readium-js/./src/fixed/page-manager.ts","webpack://readium-js/./src/util/viewport.ts","webpack://readium-js/./src/common/gestures.ts","webpack://readium-js/./src/fixed/double-area-manager.ts","webpack://readium-js/./src/util/fit.ts","webpack://readium-js/./src/bridge/fixed-gestures-bridge.ts","webpack://readium-js/./src/index-fixed-double.ts","webpack://readium-js/./src/bridge/fixed-double-bridge.ts"],"sourcesContent":["/** Manages a fixed layout resource embedded in an iframe. */\nexport class PageManager {\n    constructor(window, iframe, listener) {\n        this.margins = { top: 0, right: 0, bottom: 0, left: 0 };\n        this.channel = new MessageChannel();\n        if (!iframe.contentWindow) {\n            throw Error(\"Iframe argument must have been attached to DOM.\");\n        }\n        this.listener = listener;\n        this.iframe = iframe;\n        this.iframe.addEventListener(\"load\", () => {\n            this.onIframeLoaded();\n        });\n    }\n    show() {\n        this.iframe.style.display = \"unset\";\n    }\n    hide() {\n        this.iframe.style.display = \"none\";\n    }\n    /** Sets page margins. */\n    setMargins(margins) {\n        if (this.margins == margins) {\n            return;\n        }\n        this.iframe.style.marginTop = this.margins.top + \"px\";\n        this.iframe.style.marginLeft = this.margins.left + \"px\";\n        this.iframe.style.marginBottom = this.margins.bottom + \"px\";\n        this.iframe.style.marginRight = this.margins.right + \"px\";\n    }\n    /** Loads page content. */\n    loadPage(url) {\n        this.iframe.src = url;\n    }\n    /** Sets the size of this page without content. */\n    setPlaceholder(size) {\n        this.iframe.style.width = size.width + \"px\";\n        this.iframe.style.height = size.height + \"px\";\n        this.size = size;\n    }\n    onIframeLoaded() {\n        const viewport = this.iframe.contentWindow.document.querySelector(\"meta[name=viewport]\");\n        if (!viewport || viewport instanceof HTMLMetaElement) {\n            //FIXME: handle edge case\n            return;\n        }\n        const pageSize = this.parsePageSize(viewport);\n        if (!pageSize) {\n            //FIXME: handle edge case\n            return;\n        }\n        this.iframe.style.width = pageSize.width + \"px\";\n        this.iframe.style.height = pageSize.height + \"px\";\n        this.size = pageSize;\n        this.channel.port1.onmessage = (message) => {\n            console.log(`onmessage ${message}`);\n            this.onMessageFromIframe(message);\n        };\n        this.iframe.contentWindow.postMessage(\"Init\", \"*\", [this.channel.port2]);\n        this.listener.onIframeLoaded();\n    }\n    onMessageFromIframe(message) {\n        if (message.data.x && message.data.y) {\n            this.listener.onTap({ x: message.data.x, y: message.data.y });\n        }\n    }\n    /** Parses the page size from the viewport meta tag of the loaded resource. */\n    parsePageSize(viewportMeta) {\n        const regex = /(\\w+) *= *([^\\s,]+)/g;\n        const properties = new Map();\n        let match;\n        while ((match = regex.exec(viewportMeta.content))) {\n            if (match != null) {\n                properties.set(match[1], match[2]);\n            }\n        }\n        const width = parseFloat(properties.get(\"width\"));\n        const height = parseFloat(properties.get(\"height\"));\n        if (width && height) {\n            return { width, height };\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n","export class ViewportStringBuilder {\n    setInitialScale(scale) {\n        this.initialScale = scale;\n        return this;\n    }\n    setMinimumScale(scale) {\n        this.minimumScale = scale;\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    build() {\n        const components = [];\n        if (this.initialScale) {\n            components.push(\"initial-scale=\" + this.initialScale);\n        }\n        if (this.minimumScale) {\n            components.push(\"minimum-scale=\" + this.minimumScale);\n        }\n        if (this.width) {\n            components.push(\"width=\" + this.width);\n        }\n        if (this.height) {\n            components.push(\"height=\" + this.height);\n        }\n        return components.join(\", \");\n    }\n}\n","export class GesturesDetector {\n    constructor(window, listener) {\n        console.log(`Constructing Gesturesdetector for window ${window}`);\n        this.window = window;\n        this.listener = listener;\n        document.addEventListener(\"click\", (event) => {\n            console.log(\"onClick\");\n            this.onClick(event);\n        }, false);\n        /*document.addEventListener(\"DOMContentLoaded\", () => {\n          console.log(\"DOM content loaded\")\n        })*/\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.type == \"Range\") {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            // selection.type might be None (collapsed) or Caret with a collapsed range\n            // when there is not true selection.\n            return;\n        }\n        if (event.target instanceof Element &&\n            this.nearestInteractiveElement(event.target)) {\n            return;\n        }\n        console.log(\"tap detected\");\n        this.listener.onTap(event);\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element.outerHTML;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element.outerHTML;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n","import { computeScale } from \"../util/fit\";\nimport { PageManager } from \"./page-manager\";\nimport { ViewportStringBuilder } from \"../util/viewport\";\nimport { GesturesDetector } from \"../common/gestures\";\nexport class DoubleAreaManager {\n    constructor(window, leftIframe, rightIframe, metaViewport, listener) {\n        this.fit = \"contain\" /* Fit.Contain */;\n        this.insets = { top: 0, right: 0, bottom: 0, left: 0 };\n        const wrapperGesturesListener = {\n            onTap: (event) => {\n                listener.onTap({ x: event.clientX, y: event.clientY });\n            },\n        };\n        new GesturesDetector(window, wrapperGesturesListener);\n        const pageListener = {\n            onIframeLoaded: () => {\n                this.layout();\n            },\n            onTap: (event) => {\n                listener.onTap(event);\n            },\n        };\n        this.leftPage = new PageManager(window, leftIframe, pageListener);\n        this.rightPage = new PageManager(window, rightIframe, pageListener);\n        this.metaViewport = metaViewport;\n    }\n    loadSpread(spread) {\n        this.leftPage.hide();\n        this.rightPage.hide();\n        this.spread = spread;\n        if (spread.left) {\n            this.leftPage.loadPage(spread.left);\n        }\n        if (spread.right) {\n            this.rightPage.loadPage(spread.right);\n        }\n    }\n    setViewport(size, insets) {\n        if (this.viewport == size && this.insets == insets) {\n            return;\n        }\n        this.viewport = size;\n        this.insets = insets;\n        this.layout();\n    }\n    setFit(fit) {\n        if (this.fit == fit) {\n            return;\n        }\n        this.fit = fit;\n        this.layout();\n    }\n    layout() {\n        if (!this.viewport ||\n            (!this.leftPage.size && this.spread.left) ||\n            (!this.rightPage.size && this.spread.right)) {\n            return;\n        }\n        const leftMargins = {\n            top: this.insets.top,\n            right: 0,\n            bottom: this.insets.bottom,\n            left: this.insets.left,\n        };\n        this.leftPage.setMargins(leftMargins);\n        const rightMargins = {\n            top: this.insets.top,\n            right: this.insets.right,\n            bottom: this.insets.bottom,\n            left: 0,\n        };\n        this.rightPage.setMargins(rightMargins);\n        if (!this.spread.right) {\n            this.rightPage.setPlaceholder(this.leftPage.size);\n        }\n        else if (!this.spread.left) {\n            this.leftPage.setPlaceholder(this.rightPage.size);\n        }\n        const contentWidth = this.leftPage.size.width + this.rightPage.size.width;\n        const contentHeight = Math.max(this.leftPage.size.height, this.rightPage.size.height);\n        const contentSize = { width: contentWidth, height: contentHeight };\n        const safeDrawingSize = {\n            width: this.viewport.width - this.insets.left - this.insets.right,\n            height: this.viewport.height - this.insets.top - this.insets.bottom,\n        };\n        const scale = computeScale(this.fit, contentSize, safeDrawingSize);\n        this.metaViewport.content = new ViewportStringBuilder()\n            .setInitialScale(scale)\n            .setMinimumScale(scale)\n            .setWidth(contentWidth)\n            .setHeight(contentHeight)\n            .build();\n        this.leftPage.show();\n        this.rightPage.show();\n    }\n}\n","export function computeScale(fit, content, container) {\n    switch (fit) {\n        case \"contain\" /* Fit.Contain */:\n            return fitContain(content, container);\n        case \"width\" /* Fit.Width */:\n            return fitWidth(content, container);\n        case \"height\" /* Fit.Height */:\n            return fitHeight(content, container);\n    }\n}\nfunction fitContain(content, container) {\n    const widthRatio = container.width / content.width;\n    const heightRatio = container.height / content.height;\n    return Math.min(widthRatio, heightRatio);\n}\nfunction fitWidth(content, container) {\n    return container.width / content.width;\n}\nfunction fitHeight(content, container) {\n    return container.height / content.height;\n}\n","export class BridgeGesturesAdapter {\n    constructor(gesturesApi) {\n        this.nativeApi = gesturesApi;\n    }\n    onTap(event) {\n        this.nativeApi.onTap(JSON.stringify(event));\n    }\n}\n","//\n//  Copyright 2024 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\nimport { FixedDoubleBridge } from \"./bridge/fixed-double-bridge\";\nconst leftIframe = document.getElementById(\"page-left\");\nconst rightIframe = document.getElementById(\"page-right\");\nconst metaViewport = document.querySelector(\"meta[name=viewport]\");\nWindow.prototype.doubleArea = new FixedDoubleBridge(window, leftIframe, rightIframe, metaViewport, window.gestures);\n","import { DoubleAreaManager } from \"../fixed/double-area-manager\";\nimport { BridgeGesturesAdapter } from \"./fixed-gestures-bridge\";\nexport class FixedDoubleBridge {\n    constructor(window, leftIframe, rightIframe, metaViewport, gestures) {\n        const listener = new BridgeGesturesAdapter(gestures);\n        this.manager = new DoubleAreaManager(window, leftIframe, rightIframe, metaViewport, listener);\n    }\n    loadSpread(spread) {\n        this.manager.loadSpread(spread);\n    }\n    setViewport(viewporttWidth, viewportHeight, insetTop, insetRight, insetBottom, insetLeft) {\n        const viewport = { width: viewporttWidth, height: viewportHeight };\n        const insets = {\n            top: insetTop,\n            left: insetLeft,\n            bottom: insetBottom,\n            right: insetRight,\n        };\n        this.manager.setViewport(viewport, insets);\n    }\n    setFit(fit) {\n        if (fit != \"contain\" && fit != \"width\" && fit != \"height\") {\n            throw Error(`Invalid fit value: ${fit}`);\n        }\n        this.manager.setFit(fit);\n    }\n}\n"],"names":["PageManager","constructor","window","iframe","listener","this","margins","top","right","bottom","left","channel","MessageChannel","contentWindow","Error","addEventListener","onIframeLoaded","show","style","display","hide","setMargins","marginTop","marginLeft","marginBottom","marginRight","loadPage","url","src","setPlaceholder","size","width","height","viewport","document","querySelector","HTMLMetaElement","pageSize","parsePageSize","port1","onmessage","message","console","log","onMessageFromIframe","postMessage","port2","data","x","y","onTap","viewportMeta","regex","properties","Map","match","exec","content","set","parseFloat","get","ViewportStringBuilder","setInitialScale","scale","initialScale","setMinimumScale","minimumScale","setWidth","setHeight","build","components","push","join","GesturesDetector","event","onClick","defaultPrevented","selection","getSelection","type","target","Element","nearestInteractiveElement","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","outerHTML","parentElement","DoubleAreaManager","leftIframe","rightIframe","metaViewport","fit","insets","clientX","clientY","pageListener","layout","leftPage","rightPage","loadSpread","spread","setViewport","setFit","leftMargins","rightMargins","contentWidth","contentHeight","Math","max","contentSize","safeDrawingSize","container","widthRatio","heightRatio","min","fitContain","fitWidth","fitHeight","computeScale","BridgeGesturesAdapter","gesturesApi","nativeApi","JSON","stringify","getElementById","Window","prototype","doubleArea","gestures","manager","viewporttWidth","viewportHeight","insetTop","insetRight","insetBottom","insetLeft"],"sourceRoot":""}