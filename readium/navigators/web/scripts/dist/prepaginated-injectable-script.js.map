{"version":3,"file":"prepaginated-injectable-script.js","mappings":"yBAUA,ICVO,MACH,WAAAA,CAAYC,EAAQC,GAChBC,KAAKF,OAASA,EACdE,KAAKD,SAAWA,EAChBD,EAAOG,iBAAiB,oBAAoB,KACxCC,SAASD,iBAAiB,SAAUE,IAAYH,KAAKI,QAAQD,EAAM,IAAK,EAAM,GAEtF,CACA,OAAAC,CAAQD,GACJ,GAAIA,EAAME,iBACN,OAEJ,MAAMC,EAAYN,KAAKF,OAAOS,eAC1BD,GAAaA,EAAUE,aAIvBL,EAAMM,kBAAkBC,SAAWV,KAAKW,0BAA0BR,EAAMM,UAG5ET,KAAKD,SAASa,MAAMT,GACpBA,EAAMU,kBACNV,EAAMW,iBACV,CAEA,yBAAAH,CAA0BI,GACtB,OAAe,MAAXA,EACO,MAgBqD,GAdxC,CACpB,IACA,QACA,SACA,SACA,UACA,QACA,QACA,SACA,SACA,SACA,WACA,SAEgBC,QAAQD,EAAQE,SAASC,gBAIzCH,EAAQI,aAAa,oBACoC,SAAzDJ,EAAQK,aAAa,mBAAmBF,cAJjCH,EAAQM,UAQfN,EAAQO,cACDtB,KAAKW,0BAA0BI,EAAQO,eAE3C,IACX,GD9CgBxB,OAAQ,IAT5B,MACI,WAAAD,CAAYE,GACRC,KAAKD,SAAWA,CACpB,CACA,KAAAa,CAAMT,GACF,MAAMoB,EAAW,CAAEC,EAAGrB,EAAMsB,QAASC,EAAGvB,EAAMwB,SAC9C3B,KAAKD,SAASa,MAAMgB,KAAKC,UAAUN,GACvC,GAEoDzB,OAAOgC,U","sources":["webpack://readium-js/./src/index-prepaginated-injectable.ts","webpack://readium-js/./src/common/gestures.ts"],"sourcesContent":["import { GesturesManager } from \"./common/gestures\";\nclass AdapterGesturesListener {\n    constructor(listener) {\n        this.listener = listener;\n    }\n    onTap(event) {\n        const tapEvent = { x: event.clientX, y: event.clientY };\n        this.listener.onTap(JSON.stringify(tapEvent));\n    }\n}\nnew GesturesManager(window, new AdapterGesturesListener(window.gestures));\n","export class GesturesManager {\n    constructor(window, listener) {\n        this.window = window;\n        this.listener = listener;\n        window.addEventListener(\"DOMContentLoaded\", () => {\n            document.addEventListener(\"click\", (event) => { this.onClick(event); }, false);\n        });\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.isCollapsed) {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            return;\n        }\n        if (event.target instanceof Element && this.nearestInteractiveElement(event.target)) {\n            return;\n        }\n        this.listener.onTap(event);\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element.outerHTML;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element.outerHTML;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n"],"names":["constructor","window","listener","this","addEventListener","document","event","onClick","defaultPrevented","selection","getSelection","isCollapsed","target","Element","nearestInteractiveElement","onTap","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","outerHTML","parentElement","tapEvent","x","clientX","y","clientY","JSON","stringify","gestures"],"sourceRoot":""}