{"version":3,"file":"fixed-single-script.js","mappings":"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","sources":["webpack://readium-js/./src/fixed/page-manager.ts","webpack://readium-js/./src/util/viewport.ts","webpack://readium-js/./src/common/gestures.ts","webpack://readium-js/./src/fixed/single-area-manager.ts","webpack://readium-js/./src/util/fit.ts","webpack://readium-js/./src/bridge/fixed-gestures-bridge.ts","webpack://readium-js/./src/index-fixed-single.ts","webpack://readium-js/./src/bridge/fixed-single-bridge.ts"],"sourcesContent":["/** Manages a fixed layout resource embedded in an iframe. */\nexport class PageManager {\n    constructor(window, iframe, listener) {\n        this.margins = { top: 0, right: 0, bottom: 0, left: 0 };\n        if (!iframe.contentWindow) {\n            throw Error(\"Iframe argument must have been attached to DOM.\");\n        }\n        this.listener = listener;\n        this.iframe = iframe;\n    }\n    setMessagePort(messagePort) {\n        messagePort.onmessage = (message) => {\n            this.onMessageFromIframe(message);\n        };\n    }\n    show() {\n        this.iframe.style.display = \"unset\";\n    }\n    hide() {\n        this.iframe.style.display = \"none\";\n    }\n    /** Sets page margins. */\n    setMargins(margins) {\n        if (this.margins == margins) {\n            return;\n        }\n        this.iframe.style.marginTop = this.margins.top + \"px\";\n        this.iframe.style.marginLeft = this.margins.left + \"px\";\n        this.iframe.style.marginBottom = this.margins.bottom + \"px\";\n        this.iframe.style.marginRight = this.margins.right + \"px\";\n    }\n    /** Loads page content. */\n    loadPage(url) {\n        this.iframe.src = url;\n    }\n    /** Sets the size of this page without content. */\n    setPlaceholder(size) {\n        this.iframe.style.visibility = \"hidden\";\n        this.iframe.style.width = size.width + \"px\";\n        this.iframe.style.height = size.height + \"px\";\n        this.size = size;\n    }\n    onMessageFromIframe(event) {\n        const message = event.data;\n        switch (message.kind) {\n            case \"contentSize\":\n                return this.onContentSizeAvailable(message.size);\n            case \"tap\":\n                return this.listener.onTap({ x: message.x, y: message.y });\n            case \"linkActivated\":\n                return this.listener.onLinkActivated(message.href);\n        }\n    }\n    onContentSizeAvailable(size) {\n        if (!size) {\n            //FIXME: handle edge case\n            return;\n        }\n        this.iframe.style.width = size.width + \"px\";\n        this.iframe.style.height = size.height + \"px\";\n        this.size = size;\n        this.listener.onIframeLoaded();\n    }\n}\n","export class ViewportStringBuilder {\n    setInitialScale(scale) {\n        this.initialScale = scale;\n        return this;\n    }\n    setMinimumScale(scale) {\n        this.minimumScale = scale;\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    build() {\n        const components = [];\n        if (this.initialScale) {\n            components.push(\"initial-scale=\" + this.initialScale);\n        }\n        if (this.minimumScale) {\n            components.push(\"minimum-scale=\" + this.minimumScale);\n        }\n        if (this.width) {\n            components.push(\"width=\" + this.width);\n        }\n        if (this.height) {\n            components.push(\"height=\" + this.height);\n        }\n        return components.join(\", \");\n    }\n}\nexport function parseViewportString(viewportString) {\n    const regex = /(\\w+) *= *([^\\s,]+)/g;\n    const properties = new Map();\n    let match;\n    while ((match = regex.exec(viewportString))) {\n        if (match != null) {\n            properties.set(match[1], match[2]);\n        }\n    }\n    const width = parseFloat(properties.get(\"width\"));\n    const height = parseFloat(properties.get(\"height\"));\n    if (width && height) {\n        return { width, height };\n    }\n    else {\n        return undefined;\n    }\n}\n","export class GesturesDetector {\n    constructor(window, listener) {\n        this.window = window;\n        this.listener = listener;\n        document.addEventListener(\"click\", (event) => {\n            this.onClick(event);\n        }, false);\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.type == \"Range\") {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            // selection.type might be None (collapsed) or Caret with a collapsed range\n            // when there is not true selection.\n            return;\n        }\n        let nearestElement;\n        if (event.target instanceof HTMLElement) {\n            nearestElement = this.nearestInteractiveElement(event.target);\n        }\n        else {\n            nearestElement = null;\n        }\n        if (nearestElement) {\n            if (nearestElement instanceof HTMLAnchorElement) {\n                this.listener.onLinkActivated(nearestElement.href);\n            }\n        }\n        else {\n            this.listener.onTap(event);\n        }\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n","import { computeScale } from \"../util/fit\";\nimport { PageManager } from \"./page-manager\";\nimport { ViewportStringBuilder } from \"../util/viewport\";\nimport { GesturesDetector } from \"../common/gestures\";\nexport class SingleAreaManager {\n    constructor(window, iframe, metaViewport, listener) {\n        this.fit = \"contain\" /* Fit.Contain */;\n        this.insets = { top: 0, right: 0, bottom: 0, left: 0 };\n        this.scale = 1;\n        window.addEventListener(\"message\", (event) => {\n            if (event.source === iframe.contentWindow && event.ports[0]) {\n                this.page.setMessagePort(event.ports[0]);\n            }\n        });\n        const wrapperGesturesListener = {\n            onTap: (event) => {\n                const tapEvent = {\n                    x: (event.clientX - visualViewport.offsetLeft) *\n                        visualViewport.scale,\n                    y: (event.clientY - visualViewport.offsetTop) * visualViewport.scale,\n                };\n                listener.onTap(tapEvent);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onLinkActivated: (_) => {\n                throw Error(\"No interactive element in the root document.\");\n            },\n        };\n        new GesturesDetector(window, wrapperGesturesListener);\n        this.metaViewport = metaViewport;\n        const pageListener = {\n            onIframeLoaded: () => {\n                this.onIframeLoaded();\n            },\n            onTap: (event) => {\n                const boundingRect = iframe.getBoundingClientRect();\n                const tapEvent = {\n                    x: (event.x + boundingRect.left - visualViewport.offsetLeft) *\n                        visualViewport.scale,\n                    y: (event.y + boundingRect.top - visualViewport.offsetTop) *\n                        visualViewport.scale,\n                };\n                listener.onTap(tapEvent);\n            },\n            onLinkActivated: (href) => {\n                listener.onLinkActivated(href);\n            },\n        };\n        this.page = new PageManager(window, iframe, pageListener);\n    }\n    setViewport(viewport, insets) {\n        if (this.viewport == viewport && this.insets == insets) {\n            return;\n        }\n        this.viewport = viewport;\n        this.insets = insets;\n        this.layout();\n    }\n    setFit(fit) {\n        if (this.fit == fit) {\n            return;\n        }\n        this.fit = fit;\n        this.layout();\n    }\n    loadResource(url) {\n        this.page.hide();\n        this.page.loadPage(url);\n    }\n    onIframeLoaded() {\n        if (!this.page.size) {\n            // FIXME: raise error\n        }\n        else {\n            this.layout();\n        }\n    }\n    layout() {\n        if (!this.page.size || !this.viewport) {\n            return;\n        }\n        const margins = {\n            top: this.insets.top,\n            right: this.insets.right,\n            bottom: this.insets.bottom,\n            left: this.insets.left,\n        };\n        this.page.setMargins(margins);\n        const safeDrawingSize = {\n            width: this.viewport.width - this.insets.left - this.insets.right,\n            height: this.viewport.height - this.insets.top - this.insets.bottom,\n        };\n        const scale = computeScale(this.fit, this.page.size, safeDrawingSize);\n        this.metaViewport.content = new ViewportStringBuilder()\n            .setInitialScale(scale)\n            .setMinimumScale(scale)\n            .setWidth(this.page.size.width)\n            .setHeight(this.page.size.height)\n            .build();\n        this.scale = scale;\n        this.page.show();\n    }\n}\n","export function computeScale(fit, content, container) {\n    switch (fit) {\n        case \"contain\" /* Fit.Contain */:\n            return fitContain(content, container);\n        case \"width\" /* Fit.Width */:\n            return fitWidth(content, container);\n        case \"height\" /* Fit.Height */:\n            return fitHeight(content, container);\n    }\n}\nfunction fitContain(content, container) {\n    const widthRatio = container.width / content.width;\n    const heightRatio = container.height / content.height;\n    return Math.min(widthRatio, heightRatio);\n}\nfunction fitWidth(content, container) {\n    return container.width / content.width;\n}\nfunction fitHeight(content, container) {\n    return container.height / content.height;\n}\n","export class BridgeGesturesAdapter {\n    constructor(gesturesApi) {\n        this.nativeApi = gesturesApi;\n    }\n    onTap(event) {\n        this.nativeApi.onTap(JSON.stringify(event));\n    }\n    onLinkActivated(href) {\n        this.nativeApi.onLinkActivated(href);\n    }\n}\n","//\n//  Copyright 2024 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\nimport { FixedSingleBridge } from \"./bridge/fixed-single-bridge\";\nconst iframe = document.getElementById(\"page\");\nconst metaViewport = document.querySelector(\"meta[name=viewport]\");\nwindow.singleArea = new FixedSingleBridge(window, iframe, metaViewport, window.gestures);\nwindow.initialization.onScriptsLoaded();\n","import { SingleAreaManager } from \"../fixed/single-area-manager\";\nimport { BridgeGesturesAdapter } from \"./fixed-gestures-bridge\";\nexport class FixedSingleBridge {\n    constructor(window, iframe, metaViewport, gestures) {\n        const listener = new BridgeGesturesAdapter(gestures);\n        this.manager = new SingleAreaManager(window, iframe, metaViewport, listener);\n    }\n    loadResource(url) {\n        this.manager.loadResource(url);\n    }\n    setViewport(viewporttWidth, viewportHeight, insetTop, insetRight, insetBottom, insetLeft) {\n        const viewport = { width: viewporttWidth, height: viewportHeight };\n        const insets = {\n            top: insetTop,\n            left: insetLeft,\n            bottom: insetBottom,\n            right: insetRight,\n        };\n        this.manager.setViewport(viewport, insets);\n    }\n    setFit(fit) {\n        if (fit != \"contain\" && fit != \"width\" && fit != \"height\") {\n            throw Error(`Invalid fit value: ${fit}`);\n        }\n        this.manager.setFit(fit);\n    }\n}\n"],"names":["PageManager","constructor","window","iframe","listener","this","margins","top","right","bottom","left","contentWindow","Error","setMessagePort","messagePort","onmessage","message","onMessageFromIframe","show","style","display","hide","setMargins","marginTop","marginLeft","marginBottom","marginRight","loadPage","url","src","setPlaceholder","size","visibility","width","height","event","data","kind","onContentSizeAvailable","onTap","x","y","onLinkActivated","href","onIframeLoaded","ViewportStringBuilder","setInitialScale","scale","initialScale","setMinimumScale","minimumScale","setWidth","setHeight","build","components","push","join","GesturesDetector","document","addEventListener","onClick","defaultPrevented","selection","getSelection","type","nearestElement","target","HTMLElement","nearestInteractiveElement","HTMLAnchorElement","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","parentElement","SingleAreaManager","metaViewport","fit","insets","source","ports","page","tapEvent","clientX","visualViewport","offsetLeft","clientY","offsetTop","_","pageListener","boundingRect","getBoundingClientRect","setViewport","viewport","layout","setFit","loadResource","safeDrawingSize","content","container","widthRatio","heightRatio","Math","min","fitContain","fitWidth","fitHeight","computeScale","BridgeGesturesAdapter","gesturesApi","nativeApi","JSON","stringify","getElementById","querySelector","singleArea","gestures","manager","viewporttWidth","viewportHeight","insetTop","insetRight","insetBottom","insetLeft","initialization","onScriptsLoaded"],"sourceRoot":""}