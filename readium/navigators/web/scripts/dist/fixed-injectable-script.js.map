{"version":3,"file":"fixed-injectable-script.js","mappings":"yBAAO,MAAMA,EACT,WAAAC,CAAYC,EAAQC,GAChBC,QAAQC,IAAI,4CAA4CH,KACxDI,KAAKJ,OAASA,EACdI,KAAKH,SAAWA,EAChBI,SAASC,iBAAiB,SAAUC,IAChCL,QAAQC,IAAI,WACZC,KAAKI,QAAQD,EAAM,IACpB,EAIP,CACA,OAAAC,CAAQD,GACJ,GAAIA,EAAME,iBACN,OAEJ,MAAMC,EAAYN,KAAKJ,OAAOW,eAC1BD,GAA+B,SAAlBA,EAAUE,MAMvBL,EAAMM,kBAAkBC,SACxBV,KAAKW,0BAA0BR,EAAMM,UAGzCX,QAAQC,IAAI,gBACZC,KAAKH,SAASe,MAAMT,GACpBA,EAAMU,kBACNV,EAAMW,iBACV,CAEA,yBAAAH,CAA0BI,GACtB,OAAe,MAAXA,EACO,MAgBqD,GAdxC,CACpB,IACA,QACA,SACA,SACA,UACA,QACA,QACA,SACA,SACA,SACA,WACA,SAEgBC,QAAQD,EAAQE,SAASC,gBAIzCH,EAAQI,aAAa,oBACoC,SAAzDJ,EAAQK,aAAa,mBAAmBF,cAJjCH,EAAQM,UAQfN,EAAQO,cACDtB,KAAKW,0BAA0BI,EAAQO,eAE3C,IACX,ECxDJ1B,OAAOM,iBAAiB,WAAYC,IAChC,GAAIA,EAAMoB,MAAM,GAAI,CAChBzB,QAAQC,IAAI,kBACZ,MAAMyB,EAAcrB,EAAMoB,MAAM,GAC1BE,EAAoB,IAAIC,EAA0BF,GACxD,IAAI9B,EAAiBE,OAAQ6B,EACjC,KAEJ,MAAMC,EACF,WAAA/B,CAAY6B,GACRxB,KAAKwB,YAAcA,CACvB,CACA,KAAAZ,CAAMT,GACFL,QAAQC,IAAI,iBACZ,MAAM4B,EAAW,CAAEC,EAAGzB,EAAM0B,QAASC,EAAG3B,EAAM4B,SAC9C/B,KAAKwB,YAAYQ,YAAYL,EACjC,E","sources":["webpack://readium-js/./src/common/gestures.ts","webpack://readium-js/./src/index-fixed-injectable.ts"],"sourcesContent":["export class GesturesDetector {\n    constructor(window, listener) {\n        console.log(`Constructing Gesturesdetector for window ${window}`);\n        this.window = window;\n        this.listener = listener;\n        document.addEventListener(\"click\", (event) => {\n            console.log(\"onClick\");\n            this.onClick(event);\n        }, false);\n        /*document.addEventListener(\"DOMContentLoaded\", () => {\n          console.log(\"DOM content loaded\")\n        })*/\n    }\n    onClick(event) {\n        if (event.defaultPrevented) {\n            return;\n        }\n        const selection = this.window.getSelection();\n        if (selection && selection.type == \"Range\") {\n            // There's an on-going selection, the tap will dismiss it so we don't forward it.\n            // selection.type might be None (collapsed) or Caret with a collapsed range\n            // when there is not true selection.\n            return;\n        }\n        if (event.target instanceof Element &&\n            this.nearestInteractiveElement(event.target)) {\n            return;\n        }\n        console.log(\"tap detected\");\n        this.listener.onTap(event);\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    // See. https://github.com/JayPanoz/architecture/tree/touch-handling/misc/touch-handling\n    nearestInteractiveElement(element) {\n        if (element == null) {\n            return null;\n        }\n        const interactiveTags = [\n            \"a\",\n            \"audio\",\n            \"button\",\n            \"canvas\",\n            \"details\",\n            \"input\",\n            \"label\",\n            \"option\",\n            \"select\",\n            \"submit\",\n            \"textarea\",\n            \"video\",\n        ];\n        if (interactiveTags.indexOf(element.nodeName.toLowerCase()) != -1) {\n            return element.outerHTML;\n        }\n        // Checks whether the element is editable by the user.\n        if (element.hasAttribute(\"contenteditable\") &&\n            element.getAttribute(\"contenteditable\").toLowerCase() != \"false\") {\n            return element.outerHTML;\n        }\n        // Checks parents recursively because the touch might be for example on an <em> inside a <a>.\n        if (element.parentElement) {\n            return this.nearestInteractiveElement(element.parentElement);\n        }\n        return null;\n    }\n}\n","//\n//  Copyright 2024 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n/**\n * Script loaded by fixed layout resources.\n */\nimport { GesturesDetector } from \"./common/gestures\";\nwindow.addEventListener(\"message\", (event) => {\n    if (event.ports[0]) {\n        console.log(\"receiving port\");\n        const messagePort = event.ports[0];\n        const messagingListener = new MessagingGesturesListener(messagePort);\n        new GesturesDetector(window, messagingListener);\n    }\n});\nclass MessagingGesturesListener {\n    constructor(messagePort) {\n        this.messagePort = messagePort;\n    }\n    onTap(event) {\n        console.log(\"posting event\");\n        const tapEvent = { x: event.clientX, y: event.clientY };\n        this.messagePort.postMessage(tapEvent);\n    }\n}\n"],"names":["GesturesDetector","constructor","window","listener","console","log","this","document","addEventListener","event","onClick","defaultPrevented","selection","getSelection","type","target","Element","nearestInteractiveElement","onTap","stopPropagation","preventDefault","element","indexOf","nodeName","toLowerCase","hasAttribute","getAttribute","outerHTML","parentElement","ports","messagePort","messagingListener","MessagingGesturesListener","tapEvent","x","clientX","y","clientY","postMessage"],"sourceRoot":""}