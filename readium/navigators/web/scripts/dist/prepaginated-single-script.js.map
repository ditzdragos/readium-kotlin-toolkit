{"version":3,"file":"prepaginated-single-script.js","mappings":"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","sources":["webpack://readium-js/./src/prepaginated/page-manager.ts","webpack://readium-js/./src/util/viewport.ts","webpack://readium-js/./src/prepaginated/single-area-manager.ts","webpack://readium-js/./src/util/fit.ts","webpack://readium-js/./src/index-prepaginated-single.ts"],"sourcesContent":["/** Manages a fixed layout resource embedded in an iframe. */\nexport class PageManager {\n    constructor(iframe, listener) {\n        this.margins = { top: 0, right: 0, bottom: 0, left: 0 };\n        if (!iframe.contentWindow) {\n            throw Error(\"Iframe argument must have been attached to DOM.\");\n        }\n        this.listener = listener;\n        this.iframe = iframe;\n        this.iframe.addEventListener(\"load\", () => { this.onIframeLoaded(); });\n    }\n    show() {\n        this.iframe.style.display = \"unset\";\n    }\n    hide() {\n        this.iframe.style.display = \"none\";\n    }\n    /** Sets page margins. */\n    setMargins(margins) {\n        if (this.margins == margins) {\n            return;\n        }\n        this.iframe.style.marginTop = this.margins.top + \"px\";\n        this.iframe.style.marginLeft = this.margins.left + \"px\";\n        this.iframe.style.marginBottom = this.margins.bottom + \"px\";\n        this.iframe.style.marginRight = this.margins.right + \"px\";\n    }\n    /** Loads page content. */\n    loadPage(url) {\n        this.iframe.src = url;\n    }\n    /** Sets the size of this page without content. */\n    setPlaceholder(size) {\n        this.iframe.style.width = size.width + \"px\";\n        this.iframe.style.height = size.height + \"px\";\n        this.size = size;\n    }\n    onIframeLoaded() {\n        const viewport = this.iframe.contentWindow.document.querySelector(\"meta[name=viewport]\");\n        if (!viewport || viewport instanceof HTMLMetaElement) {\n            //FIXME: handle edge case\n            return;\n        }\n        const pageSize = this.parsePageSize(viewport);\n        if (!pageSize) {\n            //FIXME: handle edge case\n            return;\n        }\n        this.iframe.style.width = pageSize.width + \"px\";\n        this.iframe.style.height = pageSize.height + \"px\";\n        this.size = pageSize;\n        this.listener.onIframeLoaded();\n    }\n    /** Parses the page size from the viewport meta tag of the loaded resource. */\n    parsePageSize(viewportMeta) {\n        const regex = /(\\w+) *= *([^\\s,]+)/g;\n        const properties = new Map();\n        let match;\n        while ((match = regex.exec(viewportMeta.content))) {\n            if (match != null) {\n                properties.set(match[1], match[2]);\n            }\n        }\n        const width = parseFloat(properties.get(\"width\"));\n        const height = parseFloat(properties.get(\"height\"));\n        if (width && height) {\n            return { width, height };\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n","export class ViewportStringBuilder {\n    setInitialScale(scale) {\n        this.initialScale = scale;\n        return this;\n    }\n    setMinimumScale(scale) {\n        this.minimumScale = scale;\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    build() {\n        const components = [];\n        if (this.initialScale) {\n            components.push(\"initial-scale=\" + this.initialScale);\n        }\n        if (this.minimumScale) {\n            components.push(\"minimum-scale=\" + this.minimumScale);\n        }\n        if (this.width) {\n            components.push(\"width=\" + this.width);\n        }\n        if (this.height) {\n            components.push(\"height=\" + this.height);\n        }\n        return components.join(\", \");\n    }\n}\n","import { computeScale } from \"../util/fit\";\nimport { PageManager } from \"./page-manager\";\nimport { ViewportStringBuilder } from \"../util/viewport\";\nexport class SingleAreaManager {\n    constructor(iframe, metaViewport) {\n        this.fit = \"contain\" /* Fit.Contain */;\n        this.insets = { top: 0, right: 0, bottom: 0, left: 0 };\n        this.metaViewport = metaViewport;\n        const listener = { onIframeLoaded: () => { this.onIframeLoaded(); } };\n        this.page = new PageManager(iframe, listener);\n    }\n    setViewport(viewport, insets) {\n        if (this.viewport == viewport && this.insets == insets) {\n            return;\n        }\n        this.viewport = viewport;\n        this.insets = insets;\n        this.layout();\n    }\n    setFit(fit) {\n        if (this.fit == fit) {\n            return;\n        }\n        this.fit = fit;\n        this.layout();\n    }\n    loadResource(url) {\n        this.page.hide();\n        this.page.loadPage(url);\n    }\n    onIframeLoaded() {\n        if (!this.page.size) {\n            // FIXME: raise error\n        }\n        else {\n            this.layout();\n        }\n    }\n    layout() {\n        if (!this.page.size || !this.viewport) {\n            return;\n        }\n        const margins = { top: this.insets.top, right: this.insets.right, bottom: this.insets.bottom, left: this.insets.left };\n        this.page.setMargins(margins);\n        const scale = computeScale(this.fit, this.page.size, this.viewport);\n        this.metaViewport.content = new ViewportStringBuilder()\n            .setInitialScale(scale)\n            .setMinimumScale(scale)\n            .setWidth(this.page.size.width)\n            .setHeight(this.page.size.height)\n            .build();\n        this.page.show();\n    }\n}\n","export function computeScale(fit, content, container) {\n    switch (fit) {\n        case \"contain\" /* Fit.Contain */:\n            return fitContain(content, container);\n        case \"width\" /* Fit.Width */:\n            return fitWidth(content, container);\n        case \"height\" /* Fit.Height */:\n            return fitHeight(content, container);\n    }\n}\nfunction fitContain(content, container) {\n    const widthRatio = container.width / content.width;\n    const heightRatio = container.height / content.height;\n    return Math.min(widthRatio, heightRatio);\n}\nfunction fitWidth(content, container) {\n    return container.width / content.width;\n}\nfunction fitHeight(content, container) {\n    return container.height / content.height;\n}\n","//\n//  Copyright 2021 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\nimport { SingleAreaManager } from \"./prepaginated/single-area-manager\";\n// Script used for the single spread wrapper HTML page for fixed layout resources.\n/*class WebListener implements SingleAreaManager.Listener{\n\n    onError(error: SingleAreaManager.Error): void {\n        console.error(error);\n    }\n}\n\n//declare let listener: FixedPageManager.Listener\nconst listener = new WebListener();*/\nvar Layout;\n(function (Layout) {\n    const iframe = document.getElementById(\"page\");\n    const metaViewport = document.querySelector(\"meta[name=viewport]\");\n    const manager = new SingleAreaManager(iframe, metaViewport);\n    function loadResource(url) {\n        manager.loadResource(url);\n    }\n    Layout.loadResource = loadResource;\n    function setViewport(viewporttWidth, viewportHeight, insetTop, insetLeft, insetBottom, insetRight) {\n        const viewport = { width: viewporttWidth, height: viewportHeight };\n        const insets = { top: insetTop, left: insetLeft, bottom: insetBottom, right: insetRight };\n        manager.setViewport(viewport, insets);\n    }\n    Layout.setViewport = setViewport;\n    function setFit(fit) {\n        if (fit != \"contain\" && fit != \"width\" && fit != \"height\") {\n            throw Error(`Invalid fit value: ${fit}`);\n        }\n        manager.setFit(fit);\n    }\n    Layout.setFit = setFit;\n})(Layout || (Layout = {}));\nWindow.prototype.layout = Layout;\n"],"names":["PageManager","constructor","iframe","listener","this","margins","top","right","bottom","left","contentWindow","Error","addEventListener","onIframeLoaded","show","style","display","hide","setMargins","marginTop","marginLeft","marginBottom","marginRight","loadPage","url","src","setPlaceholder","size","width","height","viewport","document","querySelector","HTMLMetaElement","pageSize","parsePageSize","viewportMeta","regex","properties","Map","match","exec","content","set","parseFloat","get","ViewportStringBuilder","setInitialScale","scale","initialScale","setMinimumScale","minimumScale","setWidth","setHeight","build","components","push","join","SingleAreaManager","metaViewport","fit","insets","page","setViewport","layout","setFit","loadResource","container","widthRatio","heightRatio","Math","min","fitContain","fitWidth","fitHeight","computeScale","Layout","getElementById","manager","viewporttWidth","viewportHeight","insetTop","insetLeft","insetBottom","insetRight","Window","prototype"],"sourceRoot":""}