{"version":3,"file":"prepaginated-single-script.js","mappings":"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","sources":["webpack://readium-js/./src/prepaginated/page-manager.ts","webpack://readium-js/./src/util/viewport.ts","webpack://readium-js/./src/prepaginated/single-area-manager.ts","webpack://readium-js/./src/util/fit.ts","webpack://readium-js/./src/index-prepaginated-single.ts"],"sourcesContent":["/** Manages a fixed layout resource embedded in an iframe. */\nexport class PageManager {\n    constructor(iframe, listener) {\n        this.margins = { top: 0, right: 0, bottom: 0, left: 0 };\n        if (!iframe.contentWindow) {\n            throw Error(\"Iframe argument must have been attached to DOM.\");\n        }\n        this.listener = listener;\n        this.iframe = iframe;\n        this.iframe.addEventListener(\"load\", () => { this.onIframeLoaded(); });\n    }\n    show() {\n        this.iframe.style.display = \"unset\";\n    }\n    hide() {\n        this.iframe.style.display = \"none\";\n    }\n    /** Sets page margins. */\n    setMargins(margins) {\n        if (this.margins == margins) {\n            return;\n        }\n        this.iframe.style.marginTop = this.margins.top + \"px\";\n        this.iframe.style.marginLeft = this.margins.left + \"px\";\n        this.iframe.style.marginBottom = this.margins.bottom + \"px\";\n        this.iframe.style.marginRight = this.margins.right + \"px\";\n    }\n    /** Loads page content. */\n    loadPage(url) {\n        this.iframe.src = url;\n    }\n    onIframeLoaded() {\n        const viewport = this.iframe.contentWindow.document.querySelector(\"meta[name=viewport]\");\n        if (viewport instanceof HTMLMetaElement) {\n            return;\n        }\n        const pageSize = this.parsePageSize(viewport);\n        if (!pageSize) {\n            //FIXME: handle edge case\n            return;\n        }\n        this.iframe.style.width = pageSize.width + \"px\";\n        this.iframe.style.height = pageSize.height + \"px\";\n        this.size = pageSize;\n        this.listener.onIframeLoaded();\n    }\n    /** Parses the page size from the viewport meta tag of the loaded resource. */\n    parsePageSize(viewportMeta) {\n        const regex = /(\\w+) *= *([^\\s,]+)/g;\n        const properties = new Map();\n        let match;\n        while ((match = regex.exec(viewportMeta.content))) {\n            if (match != null) {\n                properties.set(match[1], match[2]);\n            }\n        }\n        const width = parseFloat(properties.get(\"width\"));\n        const height = parseFloat(properties.get(\"height\"));\n        if (width && height) {\n            return { width, height };\n        }\n        else {\n            return undefined;\n        }\n    }\n}\n","export class ViewportStringBuilder {\n    setInitialScale(scale) {\n        this.initialScale = scale;\n        return this;\n    }\n    setMinimumScale(scale) {\n        this.minimumScale = scale;\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    build() {\n        const components = [];\n        if (this.initialScale) {\n            components.push(\"initial-scale=\" + this.initialScale);\n        }\n        if (this.minimumScale) {\n            components.push(\"minimum-scale=\" + this.minimumScale);\n        }\n        if (this.width) {\n            components.push(\"width=\" + this.width);\n        }\n        if (this.height) {\n            components.push(\"height=\" + this.height);\n        }\n        return components.join(\", \");\n    }\n}\n","import { computeScale } from \"../util/fit\";\nimport { PageManager } from \"./page-manager\";\nimport { ViewportStringBuilder } from \"../util/viewport\";\nexport class SingleAreaManager {\n    constructor(iframe, metaViewport) {\n        this.fit = \"contain\" /* Fit.Contain */;\n        this.insets = { top: 0, right: 0, bottom: 0, left: 0 };\n        this.metaViewport = metaViewport;\n        const listener = { onIframeLoaded: () => { this.onIframeLoaded(); } };\n        this.page = new PageManager(iframe, listener);\n    }\n    setViewport(viewport, insets) {\n        if (this.viewport == viewport && this.insets == insets) {\n            return;\n        }\n        this.viewport = viewport;\n        this.insets = insets;\n        this.layout();\n    }\n    setFit(fit) {\n        if (this.fit == fit) {\n            return;\n        }\n        this.fit = fit;\n        this.layout();\n    }\n    loadResource(url) {\n        this.page.hide();\n        this.page.loadPage(url);\n    }\n    onIframeLoaded() {\n        if (!this.page.size) {\n            // FIXME: raise error\n        }\n        else {\n            this.layout();\n        }\n    }\n    layout() {\n        if (!this.page.size || !this.viewport) {\n            return;\n        }\n        const margins = { top: this.insets.top, right: this.insets.right, bottom: this.insets.bottom, left: this.insets.left };\n        this.page.setMargins(margins);\n        const scale = computeScale(this.fit, this.page.size, this.viewport);\n        this.metaViewport.content = new ViewportStringBuilder()\n            .setInitialScale(scale)\n            .setMinimumScale(scale)\n            .setWidth(this.page.size.width)\n            .setHeight(this.page.size.height)\n            .build();\n        this.page.show();\n    }\n}\n","export function computeScale(fit, content, container) {\n    switch (fit) {\n        case \"contain\" /* Fit.Contain */:\n            return fitContain(content, container);\n        case \"width\" /* Fit.Width */:\n            return fitWidth(content, container);\n        case \"height\" /* Fit.Height */:\n            return fitHeight(content, container);\n    }\n}\nfunction fitContain(content, container) {\n    const widthRatio = container.width / content.width;\n    const heightRatio = container.height / content.height;\n    return Math.min(widthRatio, heightRatio);\n}\nfunction fitWidth(content, container) {\n    return container.width / content.width;\n}\nfunction fitHeight(content, container) {\n    return container.height / content.height;\n}\n","//\n//  Copyright 2021 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\nimport { SingleAreaManager } from \"./prepaginated/single-area-manager\";\n// Script used for the single spread wrapper HTML page for fixed layout resources.\n/*class WebListener implements SingleAreaManager.Listener{\n\n    onError(error: SingleAreaManager.Error): void {\n        console.error(error);\n    }\n}\n\n//declare let listener: FixedPageManager.Listener\nconst listener = new WebListener();*/\nvar Layout;\n(function (Layout) {\n    const iframe = document.getElementById(\"page\");\n    const metaViewport = document.querySelector(\"meta[name=viewport]\");\n    const manager = new SingleAreaManager(iframe, metaViewport);\n    function loadResource(url) {\n        manager.loadResource(url);\n    }\n    Layout.loadResource = loadResource;\n    function setViewport(viewporttWidth, viewportHeight, insetTop, insetLeft, insetBottom, insetRight) {\n        const viewport = { width: viewporttWidth, height: viewportHeight };\n        const insets = { top: insetTop, left: insetLeft, bottom: insetBottom, right: insetRight };\n        manager.setViewport(viewport, insets);\n    }\n    Layout.setViewport = setViewport;\n    function setFit(fit) {\n        if (fit != \"contain\" && fit != \"width\" && fit != \"height\") {\n            throw Error(`Invalid fit value: ${fit}`);\n        }\n        manager.setFit(fit);\n    }\n    Layout.setFit = setFit;\n})(Layout || (Layout = {}));\nWindow.prototype.layout = Layout;\n"],"names":["PageManager","constructor","iframe","listener","this","margins","top","right","bottom","left","contentWindow","Error","addEventListener","onIframeLoaded","show","style","display","hide","setMargins","marginTop","marginLeft","marginBottom","marginRight","loadPage","url","src","viewport","document","querySelector","HTMLMetaElement","pageSize","parsePageSize","width","height","size","viewportMeta","regex","properties","Map","match","exec","content","set","parseFloat","get","ViewportStringBuilder","setInitialScale","scale","initialScale","setMinimumScale","minimumScale","setWidth","setHeight","build","components","push","join","SingleAreaManager","metaViewport","fit","insets","page","setViewport","layout","setFit","loadResource","container","widthRatio","heightRatio","Math","min","fitContain","fitWidth","fitHeight","computeScale","Layout","getElementById","manager","viewporttWidth","viewportHeight","insetTop","insetLeft","insetBottom","insetRight","Window","prototype"],"sourceRoot":""}